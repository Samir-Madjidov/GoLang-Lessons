package main

import (
	"crypto/md5"
	"crypto/sha256"
	"encoding/json"
	"fmt"
	"math"
	"math/rand"
	"runtime"
	"sort"
	"sync"
	"time"
)

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const (
	colorReset  = "\033[0m"
	colorRed    = "\033[31m"
	colorGreen  = "\033[32m"
	colorYellow = "\033[33m"
	colorBlue   = "\033[34m"
	colorPurple = "\033[35m"
	colorCyan   = "\033[36m"
	colorWhite  = "\033[37m"
)

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
type BenchmarkResult struct {
	TestName     string
	Duration     time.Duration
	Operations   int64
	OpsPerSecond float64
	Score        int
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞
type LaptopBenchmark struct {
	results      []BenchmarkResult
	totalScore   int
	cpuCores     int
	startTime    time.Time
	mu           sync.Mutex
	progressChan chan string
}

func NewLaptopBenchmark() *LaptopBenchmark {
	return &LaptopBenchmark{
		results:      make([]BenchmarkResult, 0),
		cpuCores:     runtime.NumCPU(),
		progressChan: make(chan string, 100),
	}
}

// ============================================
// –¢–ï–°–¢ 1: CPU - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
// ============================================
func (lb *LaptopBenchmark) testPrimeNumbers() BenchmarkResult {
	lb.progressChan <- "üî¢ –¢–µ—Å—Ç 1/10: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª..."

	start := time.Now()
	limit := 1000000
	primeCount := 0

	isPrime := func(n int) bool {
		if n < 2 {
			return false
		}
		for i := 2; i*i <= n; i++ {
			if n%i == 0 {
				return false
			}
		}
		return true
	}

	for i := 2; i < limit; i++ {
		if isPrime(i) {
			primeCount++
		}
	}

	duration := time.Since(start)
	opsPerSec := float64(limit) / duration.Seconds()
	score := int(opsPerSec / 10000)

	return BenchmarkResult{
		TestName:     "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª",
		Duration:     duration,
		Operations:   int64(limit),
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 2: CPU - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
// ============================================
func (lb *LaptopBenchmark) testMathOperations() BenchmarkResult {
	lb.progressChan <- "‚ûó –¢–µ—Å—Ç 2/10: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏..."

	start := time.Now()
	iterations := 10000000
	result := 0.0

	for i := 0; i < iterations; i++ {
		x := float64(i)
		result += math.Sqrt(x) * math.Sin(x) / math.Cos(x+1)
		result += math.Log(x+1) * math.Exp(x/1000000)
		result += math.Pow(x, 1.5) / (x + 1)
	}

	duration := time.Since(start)
	opsPerSec := float64(iterations) / duration.Seconds()
	score := int(opsPerSec / 100000)

	return BenchmarkResult{
		TestName:     "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
		Duration:     duration,
		Operations:   int64(iterations),
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 3: –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–°–¢–¨ - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
// ============================================
func (lb *LaptopBenchmark) testMultiThreading() BenchmarkResult {
	lb.progressChan <- "üîÑ –¢–µ—Å—Ç 3/10: –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è..."

	start := time.Now()
	numWorkers := lb.cpuCores * 2
	jobsPerWorker := 500000

	var wg sync.WaitGroup
	totalOps := int64(0)
	var mu sync.Mutex

	worker := func(id int) {
		defer wg.Done()
		localOps := int64(0)

		for i := 0; i < jobsPerWorker; i++ {
			x := float64(i)
			_ = math.Sqrt(x) * math.Sin(x) * math.Cos(x)
			localOps++
		}

		mu.Lock()
		totalOps += localOps
		mu.Unlock()
	}

	for i := 0; i < numWorkers; i++ {
		wg.Add(1)
		go worker(i)
	}

	wg.Wait()
	duration := time.Since(start)
	opsPerSec := float64(totalOps) / duration.Seconds()
	score := int(opsPerSec / 500000)

	return BenchmarkResult{
		TestName:     "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
		Duration:     duration,
		Operations:   totalOps,
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 4: –ü–ê–ú–Ø–¢–¨ - –†–∞–±–æ—Ç–∞ —Å –±–æ–ª—å—à–∏–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
// ============================================
func (lb *LaptopBenchmark) testMemoryOperations() BenchmarkResult {
	lb.progressChan <- "üíæ –¢–µ—Å—Ç 4/10: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é..."

	start := time.Now()
	size := 10000000
	data := make([]int, size)

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
	for i := 0; i < size; i++ {
		data[i] = rand.Intn(1000000)
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
	sort.Ints(data)

	// –ü–æ–∏—Å–∫
	searchOps := 0
	for i := 0; i < 10000; i++ {
		target := rand.Intn(1000000)
		idx := sort.SearchInts(data, target)
		if idx < len(data) {
			searchOps++
		}
	}

	duration := time.Since(start)
	opsPerSec := float64(size+searchOps) / duration.Seconds()
	score := int(opsPerSec / 100000)

	return BenchmarkResult{
		TestName:     "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é",
		Duration:     duration,
		Operations:   int64(size + searchOps),
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 5: –°–¢–†–û–ö–ò - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
// ============================================
func (lb *LaptopBenchmark) testStringOperations() BenchmarkResult {
	lb.progressChan <- "üìù –¢–µ—Å—Ç 5/10: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫..."

	start := time.Now()
	iterations := 100000
	totalOps := int64(0)

	baseString := "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ Go"

	for i := 0; i < iterations; i++ {
		// –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è
		result := baseString
		for j := 0; j < 10; j++ {
			result += fmt.Sprintf(" %d", j)
			totalOps++
		}

		// –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
		for j := 0; j < 5; j++ {
			_ = len(result)
			totalOps++
		}
	}

	duration := time.Since(start)
	opsPerSec := float64(totalOps) / duration.Seconds()
	score := int(opsPerSec / 50000)

	return BenchmarkResult{
		TestName:     "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫",
		Duration:     duration,
		Operations:   totalOps,
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 6: –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–Ø - –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
// ============================================
func (lb *LaptopBenchmark) testCryptoOperations() BenchmarkResult {
	lb.progressChan <- "üîê –¢–µ—Å—Ç 6/10: –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏..."

	start := time.Now()
	iterations := 100000
	data := []byte("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")

	for i := 0; i < iterations; i++ {
		// MD5
		_ = md5.Sum(data)

		// SHA256
		_ = sha256.Sum256(data)
	}

	duration := time.Since(start)
	totalOps := int64(iterations * 2)
	opsPerSec := float64(totalOps) / duration.Seconds()
	score := int(opsPerSec / 10000)

	return BenchmarkResult{
		TestName:     "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
		Duration:     duration,
		Operations:   totalOps,
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 7: JSON - –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
// ============================================
func (lb *LaptopBenchmark) testJSONOperations() BenchmarkResult {
	lb.progressChan <- "üì¶ –¢–µ—Å—Ç 7/10: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å JSON..."

	start := time.Now()
	iterations := 50000

	type TestData struct {
		ID       int                    `json:"id"`
		Name     string                 `json:"name"`
		Email    string                 `json:"email"`
		Age      int                    `json:"age"`
		Active   bool                   `json:"active"`
		Tags     []string               `json:"tags"`
		Metadata map[string]interface{} `json:"metadata"`
	}

	for i := 0; i < iterations; i++ {
		data := TestData{
			ID:     i,
			Name:   fmt.Sprintf("User_%d", i),
			Email:  fmt.Sprintf("user%d@example.com", i),
			Age:    20 + (i % 50),
			Active: i%2 == 0,
			Tags:   []string{"tag1", "tag2", "tag3"},
			Metadata: map[string]interface{}{
				"key1": "value1",
				"key2": 123,
				"key3": true,
			},
		}

		// –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
		jsonData, _ := json.Marshal(data)

		// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
		var decoded TestData
		_ = json.Unmarshal(jsonData, &decoded)
	}

	duration := time.Since(start)
	totalOps := int64(iterations * 2)
	opsPerSec := float64(totalOps) / duration.Seconds()
	score := int(opsPerSec / 5000)

	return BenchmarkResult{
		TestName:     "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å JSON",
		Duration:     duration,
		Operations:   totalOps,
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 8: –ê–õ–ì–û–†–ò–¢–ú–´ - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–æ–∏—Å–∫
// ============================================
func (lb *LaptopBenchmark) testAlgorithms() BenchmarkResult {
	lb.progressChan <- "üéØ –¢–µ—Å—Ç 8/10: –ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∏—Å–∫–∞..."

	start := time.Now()
	arraySize := 100000
	iterations := 100
	totalOps := int64(0)

	for iter := 0; iter < iterations; iter++ {
		// –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –º–∞—Å—Å–∏–≤
		data := make([]int, arraySize)
		for i := 0; i < arraySize; i++ {
			data[i] = rand.Intn(1000000)
		}

		// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
		sort.Ints(data)
		totalOps += int64(arraySize)

		// –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
		for i := 0; i < 1000; i++ {
			target := rand.Intn(1000000)
			_ = sort.SearchInts(data, target)
			totalOps++
		}
	}

	duration := time.Since(start)
	opsPerSec := float64(totalOps) / duration.Seconds()
	score := int(opsPerSec / 100000)

	return BenchmarkResult{
		TestName:     "–ê–ª–≥–æ—Ä–∏—Ç–º—ã (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞/–ø–æ–∏—Å–∫)",
		Duration:     duration,
		Operations:   totalOps,
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 9: –†–ï–ö–£–†–°–ò–Ø - –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
// ============================================
func (lb *LaptopBenchmark) testRecursion() BenchmarkResult {
	lb.progressChan <- "üîÅ –¢–µ—Å—Ç 9/10: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è..."

	start := time.Now()

	var fib func(n int) int
	fib = func(n int) int {
		if n <= 1 {
			return n
		}
		return fib(n-1) + fib(n-2)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	cache := make(map[int]int)
	var fibCached func(n int) int
	fibCached = func(n int) int {
		if n <= 1 {
			return n
		}
		if val, exists := cache[n]; exists {
			return val
		}
		result := fibCached(n-1) + fibCached(n-2)
		cache[n] = result
		return result
	}

	totalOps := int64(0)
	for i := 0; i < 35; i++ {
		_ = fibCached(i)
		totalOps++
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
	for i := 0; i < 1000; i++ {
		_ = fibCached(30)
		totalOps++
	}

	duration := time.Since(start)
	opsPerSec := float64(totalOps) / duration.Seconds()
	score := int(opsPerSec / 50)

	return BenchmarkResult{
		TestName:     "–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
		Duration:     duration,
		Operations:   totalOps,
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –¢–ï–°–¢ 10: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô - –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
// ============================================
func (lb *LaptopBenchmark) testComplexWorkload() BenchmarkResult {
	lb.progressChan <- "‚ö° –¢–µ—Å—Ç 10/10: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞..."

	start := time.Now()
	numWorkers := lb.cpuCores
	var wg sync.WaitGroup
	totalOps := int64(0)
	var mu sync.Mutex

	worker := func(id int) {
		defer wg.Done()
		localOps := int64(0)

		// –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
		for i := 0; i < 10000; i++ {
			x := float64(i)
			_ = math.Sqrt(x) * math.Sin(x)
			localOps++
		}

		// –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
		data := make([]int, 10000)
		for i := range data {
			data[i] = rand.Intn(10000)
		}
		sort.Ints(data)
		localOps += int64(len(data))

		// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
		for i := 0; i < 1000; i++ {
			testData := []byte(fmt.Sprintf("worker_%d_data_%d", id, i))
			_ = sha256.Sum256(testData)
			localOps++
		}

		mu.Lock()
		totalOps += localOps
		mu.Unlock()
	}

	for i := 0; i < numWorkers; i++ {
		wg.Add(1)
		go worker(i)
	}

	wg.Wait()
	duration := time.Since(start)
	opsPerSec := float64(totalOps) / duration.Seconds()
	score := int(opsPerSec / 10000)

	return BenchmarkResult{
		TestName:     "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞",
		Duration:     duration,
		Operations:   totalOps,
		OpsPerSecond: opsPerSec,
		Score:        score,
	}
}

// ============================================
// –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í
// ============================================
func (lb *LaptopBenchmark) RunAllTests() {
	lb.startTime = time.Now()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go lb.printProgress()

	fmt.Printf("%s\n", colorCyan+"="*60+colorReset)
	fmt.Printf("%süöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ù–û–£–¢–ë–£–ö–ê üöÄ%s\n", colorYellow, colorReset)
	fmt.Printf("%s\n", colorCyan+"="*60+colorReset)
	fmt.Printf("üíª –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: %d —è–¥–µ—Ä/–ø–æ—Ç–æ–∫–æ–≤\n", lb.cpuCores)
	fmt.Printf("‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s\n\n", time.Now().Format("15:04:05"))

	tests := []func() BenchmarkResult{
		lb.testPrimeNumbers,
		lb.testMathOperations,
		lb.testMultiThreading,
		lb.testMemoryOperations,
		lb.testStringOperations,
		lb.testCryptoOperations,
		lb.testJSONOperations,
		lb.testAlgorithms,
		lb.testRecursion,
		lb.testComplexWorkload,
	}

	for _, test := range tests {
		result := test()
		lb.mu.Lock()
		lb.results = append(lb.results, result)
		lb.totalScore += result.Score
		lb.mu.Unlock()
		time.Sleep(500 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
	}

	close(lb.progressChan)
	time.Sleep(1 * time.Second)

	lb.printResults()
}

// –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func (lb *LaptopBenchmark) printProgress() {
	for msg := range lb.progressChan {
		fmt.Printf("%s%s%s\n", colorCyan, msg, colorReset)
	}
}

// ============================================
// –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
// ============================================
func (lb *LaptopBenchmark) printResults() {
	fmt.Printf("\n%s\n", colorGreen+"="*60+colorReset)
	fmt.Printf("%süìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø üìä%s\n", colorGreen, colorReset)
	fmt.Printf("%s\n\n", colorGreen+"="*60+colorReset)

	// –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	fmt.Printf("%-35s %10s %12s %8s\n", "–¢–ï–°–¢", "–í–†–ï–ú–Ø", "–û–ü–°/–°–ï–ö", "–ë–ê–õ–õ")
	fmt.Printf("%s\n", colorCyan+"-"*70+colorReset)

	for _, result := range lb.results {
		color := colorWhite
		if result.Score >= 100 {
			color = colorGreen
		} else if result.Score >= 50 {
			color = colorYellow
		} else {
			color = colorRed
		}

		fmt.Printf("%-35s %10s %12.0f %s%8d%s\n",
			result.TestName,
			result.Duration.Round(time.Millisecond),
			result.OpsPerSecond,
			color,
			result.Score,
			colorReset,
		)
	}

	fmt.Printf("%s\n", colorCyan+"-"*70+colorReset)

	// –û–±—â–∏–π —Å—á–µ—Ç
	totalTime := time.Since(lb.startTime)
	avgScore := lb.totalScore / len(lb.results)

	fmt.Printf("\n%süìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:%s\n", colorPurple, colorReset)
	fmt.Printf("   –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s\n", totalTime.Round(time.Second))
	fmt.Printf("   –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: %s%d%s\n", colorYellow, lb.totalScore, colorReset)
	fmt.Printf("   –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: %s%d%s\n", colorYellow, avgScore, colorReset)
	fmt.Printf("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: %d\n", lb.cpuCores)

	// –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	fmt.Printf("\n%süèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:%s ", colorYellow, colorReset)

	rating := ""
	ratingColor := colorWhite

	switch {
	case lb.totalScore >= 1000:
		rating = "–û–¢–õ–ò–ß–ù–û! üöÄ –¢–æ–ø–æ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!"
		ratingColor = colorGreen
	case lb.totalScore >= 700:
		rating = "–•–û–†–û–®–û! üí™ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
		ratingColor = colorGreen
	case lb.totalScore >= 400:
		rating = "–°–†–ï–î–ù–ï ‚ö° –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
		ratingColor = colorYellow
	case lb.totalScore >= 200:
		rating = "–ù–ò–ó–ö–û ‚ö†Ô∏è  –°–ª–∞–±–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
		ratingColor = colorRed
	default:
		rating = "–û–ß–ï–ù–¨ –ù–ò–ó–ö–û üêå –û—á–µ–Ω—å —Å–ª–∞–±–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
		ratingColor = colorRed
	}

	fmt.Printf("%s%s%s\n", ratingColor, rating, colorReset)

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	fmt.Printf("\n%süí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:%s\n", colorCyan, colorReset)
	if lb.totalScore < 400 {
		fmt.Println("   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
		fmt.Println("   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏")
		fmt.Println("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ —Å–∏—Å—Ç–µ–º—É –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è")
		fmt.Println("   ‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
	} else if lb.totalScore < 700 {
		fmt.Println("   ‚Ä¢ –í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏")
		fmt.Println("   ‚Ä¢ –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ SSD")
		fmt.Println("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")
	} else {
		fmt.Println("   ‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã!")
		fmt.Println("   ‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, 3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
		fmt.Println("   ‚Ä¢ –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏")
	}

	fmt.Printf("\n%s\n", colorCyan+"="*60+colorReset)
	fmt.Printf("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n")
	fmt.Printf("%s\n", colorCyan+"="*60+colorReset)
}

// ============================================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================
func main() {
	rand.Seed(time.Now().UnixNano())

	fmt.Println("\nüî• –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–≥—Ä—É–∑–∏—Ç –≤—Å–µ —è–¥—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞!")
	fmt.Println("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ—É—Ç–±—É–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–∏—Ç–∞–Ω–∏—é")
	fmt.Println("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2-3 –º–∏–Ω—É—Ç\n")

	fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
	fmt.Scanln()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
	runtime.GOMAXPROCS(runtime.NumCPU())

	benchmark := NewLaptopBenchmark()
	benchmark.RunAllTests()

	fmt.Println("\nüìä –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
	fmt.Println("üîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É\n")
}
